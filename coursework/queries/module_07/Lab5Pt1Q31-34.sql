-- Problem 31
USE [SaleCo];

DROP TRIGGER IF EXISTS [trg_line_total];

GO
CREATE TRIGGER [trg_line_total] ON [LINE] FOR INSERT AS
  UPDATE [LINE] SET
    LINE_TOTAL = [inserted].LINE_UNITS * [inserted].LINE_PRICE
  FROM [LINE] JOIN [inserted]
  ON [LINE].LINE_NUMBER = [inserted].LINE_NUMBER;
GO

INSERT INTO LINE
  (INV_NUMBER, LINE_NUMBER, P_CODE, LINE_UNITS, LINE_PRICE)
  VALUES(1008, 4, '13-Q2/P2', 12, 14.99);

SELECT * FROM [LINE];

DELETE [LINE] WHERE INV_NUMBER = 1008 AND LINE_NUMBER = 4;

-- Problem 32
DROP TRIGGER IF EXISTS [trg_line_prod];

GO
CREATE TRIGGER [trg_line_prod] ON [LINE] FOR INSERT AS
  UPDATE [PRODUCT] SET
    P_QOH = P_QOH - 1
  FROM [PRODUCT] JOIN [inserted]
  ON [PRODUCT].P_CODE = [inserted].P_CODE
GO

INSERT INTO LINE
  (INV_NUMBER, LINE_NUMBER, P_CODE, LINE_UNITS, LINE_PRICE)
  VALUES(1008, 4, '13-Q2/P2', 12, 14.99);

SELECT * FROM [LINE];
SELECT * FROM [PRODUCT];

DELETE [LINE] WHERE INV_NUMBER = 1008 AND LINE_NUMBER = 4;

-- Problem 33
DROP PROCEDURE IF EXISTS [prc_cus_balance_update];

GO
CREATE PROCEDURE [prc_inv_balance_update] @INV_NUMBER INT AS
  DECLARE @INV_SUBTOTAL DECIMAL(9,2), @INV_TAX DECIMAL (9,2)
  SELECT
    @INV_SUBTOTAL = SUM(LINE_TOTAL),
    @INV_TAX = SUM(LINE_TOTAL) * 0.08
    FROM [LINE]
    WHERE INV_NUMBER = @INV_NUMBER

  UPDATE [INVOICE] SET
    INV_SUBTOTAL = @INV_SUBTOTAL,
    INV_TAX = @INV_TAX,
    INV_TOTAL = @INV_SUBTOTAL + @INV_TAX
    WHERE INV_NUMBER = @INV_NUMBER;
GO

INSERT INTO LINE
  (INV_NUMBER, LINE_NUMBER, P_CODE, LINE_UNITS, LINE_PRICE)
  VALUES(1008, 4, '13-Q2/P2', 12, 14.99);

SELECT * FROM [INVOICE] WHERE INV_NUMBER = 1008;
EXEC [prc_inv_balance_update] @INV_NUMBER = 1008;
SELECT * FROM [INVOICE] WHERE INV_NUMBER = 1008;

-- Problem 34
DROP PROCEDURE IF EXISTS [prc_cus_balance_update];

GO
CREATE PROCEDURE [prc_cus_balance_update] @INV_NUMBER INT AS
  DECLARE @CUS_CODE INT = (
    SELECT CUS_CODE FROM [INVOICE] WHERE INV_NUMBER = @INV_NUMBER
  );
  DECLARE @ALL_INV_TOTAL DECIMAL(9,2) = (
    SELECT SUM(INV_TOTAL) FROM [INVOICE] WHERE CUS_CODE = @CUS_CODE
  );

  UPDATE [CUSTOMER] SET
    CUS_BALANCE = @ALL_INV_TOTAL
    WHERE CUS_CODE = @CUS_CODE
GO

SELECT * FROM [CUSTOMER] WHERE CUS_CODE = 10011;
EXEC [prc_cus_balance_update] @INV_NUMBER = 1008;
SELECT * FROM [CUSTOMER] WHERE CUS_CODE = 10011;
